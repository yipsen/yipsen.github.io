<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on Yipsen Ye</title>
    <link>http://localhost:8080/series/java/</link>
    <description>Recent content in JAVA on Yipsen Ye</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Jan 2024 23:36:41 +0800</lastBuildDate>
    <atom:link href="http://localhost:8080/series/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CompletableFuture 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/future/completablefuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 23:36:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/future/completablefuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;起手式&#xA;-&amp;gt; runAsync&#xA;-&amp;gt; supplyAsync&lt;/p&gt;&#xA;&lt;h3 id=&#34;future-接口能力&#34;&gt;Future 接口能力&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;cancel&lt;/li&gt;&#xA;&lt;li&gt;isCancel，isDone&lt;/li&gt;&#xA;&lt;li&gt;get&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;completestage-接口能力&#34;&gt;CompleteStage 接口能力&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;thenApply - thenApplyAsync &amp;ndash; applyToEither - applyToEitherAsync&lt;/li&gt;&#xA;&lt;li&gt;thenAccept - thenAccept&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;completablefuture-类追加能力任务启动执行没有继承runnable这部分也没有抽象成接口任务组合以及补充了部分状态获取方法&#34;&gt;CompletableFuture 类追加能力（任务启动执行【没有继承Runnable，这部分也没有抽象成接口】，任务组合，以及补充了部分状态获取方法）&lt;/h3&gt;&#xA;&lt;p&gt;supplyAsync     任务起手     Supplier (Callable?)    等价于 submit (Callable())&#xA;runAsync        任务起手     Runnable               等价于 submit (Runnable())&#xA;allOf           任务组合&#xA;anyOf           任务组合&#xA;join&#xA;complete - completeExceptionally - isCompleteExceptionally&lt;/p&gt;&#xA;&lt;p&gt;可以看到相比 FutureTask，最大的区别几乎都在于 CompleteStage 相关能力的实现。&lt;/p&gt;&#xA;&lt;p&gt;FutureTask 基础能力&#xA;CompletableFuture 重在组合&#xA;ListenableFuture 重在回调&lt;/p&gt;</description>
    </item>
    <item>
      <title>Future 源码分析</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/future/future-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 23:36:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/future/future-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;Java 提供两种线程实现方式：&lt;code&gt;Runnable&lt;/code&gt; 与 &lt;code&gt;Callable&lt;/code&gt;。其中 Runnable 任务提交执行后没有返回值，主线程无法感知线程的执行结果。而 Callable 弥补了这种场景，提供返回值。&lt;/p&gt;&#xA;&lt;p&gt;那么在多线程场景下，线程提交出去了，已经不在同一个运行空间（或说线程上下文），主线程又是如何能获取到其他线程的运行结果的呢？&lt;/p&gt;&#xA;&lt;p&gt;一个很直接的想法就是让任务执行完成后把执行结果放置在某处，主线程需要时去取即可。我们通过分析 Future 模式相关核心类的源码来看看它的实现原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-future-源码分析&#34;&gt;1. Future 源码分析&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-一段简单的代码例子&#34;&gt;1.1 一段简单的代码例子&lt;/h3&gt;&#xA;&lt;p&gt;下面我们从一段简单的 FutureTask 使用代码入手，分析 Future 模式的机理。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;future_run_success&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 1. 构建 FutureTask 任务，内部封装一个 Callable 任务，该任务执行完后返回一个 String。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FutureTask&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; future &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FutureTask&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Callable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(20 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 1000);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;future run success&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 2. 开启任务执行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(future).&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 3. 取回任务执行结果&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; future.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 4. 打印。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(result);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行以上代码，20s后可以看到打印出结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>ListenableFuture 源码分析</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/future/listenablefuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 23:36:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/future/listenablefuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;在 &lt;a href=&#34;../future-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90&#34;&gt;Future 源码解析&lt;/a&gt; 篇时提到过任务执行的四种模式，先简单回顾一下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;单程模式（One-Way）&lt;/p&gt;&#xA;&lt;p&gt;即只管将任务提交执行，但并不关心其结果，这种通常使用 Runnable 封装为线程提交执行。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;同步阻塞模式&lt;/p&gt;&#xA;&lt;p&gt;即直接就是运行任务，当前线程会直接运行完任务再继续后续逻辑，比如直接运行 Runnable#run。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;异步阻塞模式&lt;/p&gt;&#xA;&lt;p&gt;就如上面对 FutureTask 的分析，将任务 Callable 封装为 Future 后提交执行，同时立即阻塞线程等待获取结果，直到结果产生后继续运行后续逻辑（后续逻辑在通常就主线程上下文中运行）。即&lt;strong&gt;主动查询&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;异步监听模式&lt;/p&gt;&#xA;&lt;p&gt;还有一种任务执行模式就是异步监听模式，具体做法通常是将一个结果监听器注册给任务，任务提交执行后，主线程不阻塞继续运行，等任务线程执行完后，调用结果监听器，运行后续逻辑（通常此时在任务线程上下文中）。即&lt;strong&gt;被动回调&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;本文主要讲的就是第4种，即异步监听模式，google 的 guava 工具包提供的 ListenableFuture 类就实现了这种模式。接下来看下其具体的使用，以及其实现原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-listenablefuture-源码分析&#34;&gt;1. ListenableFuture 源码分析&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-一段简单的代码例子&#34;&gt;1.1 一段简单的代码例子&lt;/h3&gt;&#xA;&lt;p&gt;我们照旧从简单的代码例子入手分析，本次直接使用官方推荐的案例：&lt;a href=&#34;https://github.com/google/guava/wiki/ListenableFutureExplained&#34;&gt;ListenableFutureExplained&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testcase&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 1. 先获取包装后的 ExecutorService，即 ListeningExecutorService&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ListeningExecutorService executor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MoreExecutors.&lt;span style=&#34;color:#a6e22e&#34;&gt;listeningDecorator&lt;/span&gt;(Executors.&lt;span style=&#34;color:#a6e22e&#34;&gt;newFixedThreadPool&lt;/span&gt;(10));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 2. 提交任务，获取 ListenableFuture&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ListenableFuture&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; future &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; executor.&lt;span style=&#34;color:#a6e22e&#34;&gt;submit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Callable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            TimeUnit.&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(5); &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 模拟耗时调用&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;callable return result&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 3. 为 Future 绑定监听器，并继续使用 executor 生成线程（当然也可以选择其他的 executor）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Futures.&lt;span style=&#34;color:#a6e22e&#34;&gt;addCallback&lt;/span&gt;(future, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FutureCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onSuccess&lt;/span&gt;(String result) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; result);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onFailure&lt;/span&gt;(Throwable throwable) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failure: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; throwable.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, executor);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 4. 主线程可以继续运行后续逻辑，不会被阻塞&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main thread is running now......&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>ScheduledFuture 源码分析</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/future/scheduledfuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 23:36:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/future/scheduledfuture-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;具体可结合 &lt;a href=&#34;../ThreadPool/ScheduleThreadPoolExecutor%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md&#34;&gt;ScheduleThreadPoolExecutor 源码分析&lt;/a&gt; 一文&lt;/p&gt;</description>
    </item>
    <item>
      <title>jstat 工具使用</title>
      <link>http://localhost:8080/java/java-%E8%99%9A%E6%8B%9F%E6%9C%BA/jstat-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Mar 2023 08:34:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E8%99%9A%E6%8B%9F%E6%9C%BA/jstat-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;jstat 是 JDK 自带的一个轻量级小工具，全称&amp;quot;Java Virtual Machine statistics monitoring tool&amp;quot;，位于&lt;code&gt;JAVA_HOME&lt;/code&gt;的bin目录下，主要利于 JVM 内建的指令对 Java 应用的资源和性能进行实时的命令行监控，包括对&lt;code&gt;内存&lt;/code&gt;与&lt;code&gt;垃圾回收&lt;/code&gt;状况的监控。&lt;/p&gt;&#xA;&lt;p&gt;官方文档：&lt;a href=&#34;https://docs.oracle.com/en/java/javase/14/docs/specs/man/jstat.html&#34;&gt;https://docs.oracle.com/en/java/javase/14/docs/specs/man/jstat.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;最常用命令为：&lt;code&gt;jstat -gcutil &amp;lt;pid&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用方式&#34;&gt;使用方式&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基本格式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -&amp;lt;option&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-t&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-h&amp;lt;lines&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;lt;vmid&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;interval&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&amp;lt;count&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;参数说明&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;option&lt;/li&gt;&#xA;&lt;li&gt;-t&lt;/li&gt;&#xA;&lt;li&gt;-h&lt;/li&gt;&#xA;&lt;li&gt;vmid&lt;/li&gt;&#xA;&lt;li&gt;interval&lt;/li&gt;&#xA;&lt;li&gt;count&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例子&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;简单使用案例&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -gcutil: 表示使用gcutil选项，即打印垃圾回收统计信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -t: 表示同时打印时间戳列&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -h10: 表示每10行输出一次表头&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 14812: 为JVM的pid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1000: 表示每1000毫秒即每秒打印一次&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 20: 表示仅打印20条就结束。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jstat -gcutil -t -h10 &lt;span style=&#34;color:#ae81ff&#34;&gt;14812&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$&amp;gt;jstat -gcutil -t -h10 &lt;span style=&#34;color:#ae81ff&#34;&gt;14812&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Timestamp         S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           89.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           90.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           91.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           93.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           94.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           95.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           96.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           97.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           98.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          100.8   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Timestamp         S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          101.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          102.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          103.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          104.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          105.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          106.9   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          108.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          109.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          110.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          111.0   0.00   0.00  68.05   0.00  17.38  19.94      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    0.000    0.000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中打印信息选项分类较多，以下针对每个选项进行详细说明。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JVM 发生 GC 的时间点</title>
      <link>http://localhost:8080/java/java-%E8%99%9A%E6%8B%9F%E6%9C%BA/jvm-%E5%8F%91%E7%94%9F-gc-%E7%9A%84%E6%97%B6%E9%97%B4%E7%82%B9/</link>
      <pubDate>Wed, 01 Mar 2023 08:34:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E8%99%9A%E6%8B%9F%E6%9C%BA/jvm-%E5%8F%91%E7%94%9F-gc-%E7%9A%84%E6%97%B6%E9%97%B4%E7%82%B9/</guid>
      <description>&lt;p&gt;以下主要为 JVM 堆内存与 GC 相关知识点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;内存模型&#34;&gt;内存模型&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-figure&#34; data-lang=&#34;figure&#34;&gt;&#xD;&#xA;+----------------+--+--+----------------------------------------+&#xD;&#xA;|        8       | 1| 1|                   20                   |&#xD;&#xA;+================+==+==+========================================+&#xD;&#xA;|      eden      |S0|S1|                tenured                 |&#xD;&#xA;+================+==+==+========================================+&#xD;&#xA;|   Young Generation   |             Old Generation             |&#xD;&#xA;+----------------------+----------------------------------------+&#xD;&#xA;&#xD;&#xA;                 图示1：JVM 堆内存分代图&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;为什么堆要进行分代（JVM的堆内存基于Generation算法划分为新生代、老年代、永久代），因为每个对象的生命周期是不一样的，因此为了·提高垃圾回收的效率·，对不同生命周期的对象进行分代，并针对不同代采用最适合高效的垃圾回收算法，整体提升垃圾回收效率。&#xA;Java8以前永久代是放置在堆中，占用了老年代空间的，主要放置class等静态对象，容易出现性能问题或内存溢出，为解决此问题，Java8时永久代被取消，取而代之的升级为元空间（Meta Space），且不再放置在堆空间中，而是放置在宿主机的内存中（不在JVM），解决了以前永久代OOM问题。&lt;/p&gt;&#xA;&lt;p&gt;为什么会有奇怪的 From 与 To 这两块 Survivor 区域呢？原因是新生代因对象朝生夕死的特点，一般GC时只有少量存活，所以采用复制算法，这就把内存区域分为两块，每次仅使用其中一块，GC发生时把一块中的内容（仅选存活的对象）移到另一块中，原来一块的内存就全部回收清空了。优点是快速且避免内存碎片。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;堆内存分配策略&#34;&gt;堆内存分配策略&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对象优先在 Eden 分配&lt;/li&gt;&#xA;&lt;li&gt;大对象直接进入老年代&lt;/li&gt;&#xA;&lt;li&gt;长期存活（默认15以上）对象将进入老年代&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;gc-发生时机&#34;&gt;GC 发生时机&lt;/h2&gt;&#xA;&lt;h3 id=&#34;第-1-种发生回收的时机点eden区空间不足即eden-space申请失败时期发生会发生-minor-gc即-scavenge-gc因对象朝生夕死特点只有少量存活采用复制算法&#34;&gt;第 1 种发生回收的时机点：Eden区空间不足，即Eden Space申请失败时期发生，会发生 Minor GC（即 Scavenge GC）【因对象朝生夕死特点，只有少量存活，采用复制算法】&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;S0不满：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Eden区（仅存活部分的对象）                         -&amp;gt; Survivor0 区（不满时）&lt;/li&gt;&#xA;&lt;li&gt;清空 Eden&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;S0已满：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Eden区（仅存活部分的对象）+ Survivor0 区（已满时） -&amp;gt; Survivor1 区&lt;/li&gt;&#xA;&lt;li&gt;清空 Eden + S0&lt;/li&gt;&#xA;&lt;li&gt;Survivor1 区 &amp;lt;-&amp;gt; Surivior0 区（交换S0与S1的空间，目的是保持S1为空）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;S0已满，且S1不足以放置Eden + S0的存活对象（Survivor满不会引发Minor GC，而是把对象移到老年代）：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Eden + S0 存量对象 -&amp;gt; 老年代&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;躲过新生代存活区（S0 + S1）回收的存活对象，则年龄 +1，年龄满15（默认15）时移入老年代&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;S0 + S1 -&amp;gt; 老年代&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;为什么是15岁，原因是 HotSpot 会在对象头中的标记字段里记录年龄，分配到的空间只有4位，所以最多只能记录到15&lt;/p&gt;</description>
    </item>
    <item>
      <title>AbstractQueuedSynchronizer 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/abstractqueuedsynchronizer-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/abstractqueuedsynchronizer-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;aqs-介绍&#34;&gt;AQS 介绍&lt;/h3&gt;&#xA;&lt;p&gt;AQS 即 AbstractQueuedSynchronizer 类，一个抽象队列同步器，是对 CLH 队列锁的一种变体实现，并作为抽象类方便后续子类的扩展。&lt;/p&gt;&#xA;&lt;h3 id=&#34;核心数据结构clh-队列&#34;&gt;核心数据结构：CLH 队列&lt;/h3&gt;&#xA;&lt;p&gt;在多线程并发编程中遇到需要维护共享资源或者保证执行顺序时，会使用到锁的机制。&lt;/p&gt;&#xA;&lt;p&gt;锁机制的设计是出现在多线程并发资源抢占的逻辑，本质上是线程底层对资源 state 调用了 JVM 的 CAS 操作(UnSafe#compareAndSwapInt)，而当多线程并发执行该 CAS 操作时，最多只能有一个线程会操作成功（即资源抢占成功），而其他的都在自旋，这样就造成不必要的 CPU 开销。&#xA;为解决此问题，AQS 引入了 CLH 队列机制，并做了变种使得队列内只有一个节点在执行状态中（占用 CPU 资源），其余的全部处于阻塞状态（不占用 CPU 资源），当且仅当执行节点执行完毕后，才唤醒其后继节点，而此时也仅有被唤醒的节点才去尝试抢占资源并获得 CPU 执行权。因此同一时刻最多只有被唤醒的后继节点以及新入队的节点会抢占 CPU 资源，其余的都在阻塞状态中，以此极大的减少了不必要的 CPU 开销。&lt;/p&gt;&#xA;&lt;h4 id=&#34;clh-队列在-aqs-中的工作原理&#34;&gt;CLH 队列在 AQS 中的工作原理&lt;/h4&gt;&#xA;&lt;p&gt;图示：&lt;/p&gt;&#xA;&lt;p&gt;流程说明：&lt;/p&gt;&#xA;&lt;h3 id=&#34;aqs-中的关键属性与特性&#34;&gt;AQS 中的关键属性与特性&lt;/h3&gt;&#xA;&lt;p&gt;AQS 作为对锁的基础实现，主要提供四大特性，分别为：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;获取锁 acquire&lt;/li&gt;&#xA;&lt;li&gt;释放锁 release&lt;/li&gt;&#xA;&lt;li&gt;获取队列详情&lt;/li&gt;&#xA;&lt;li&gt;条件&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;核心重点在于前面两个特性，即锁的获取与释放。&lt;/p&gt;&#xA;&lt;p&gt;同时满足两种模式的锁，即&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;独占式&lt;/li&gt;&#xA;&lt;li&gt;共享式&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;为实现这些特性，我们先看下 AQS 的内部结构。&lt;/p&gt;&#xA;&lt;h4 id=&#34;aqs-的内部结构&#34;&gt;AQS 的内部结构&lt;/h4&gt;&#xA;&lt;h4 id=&#34;关键对象clh-节点-node&#34;&gt;关键对象：CLH 节点 Node&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Node: CLH 队列中的节点，代表一个线程进入 CLH 队列。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Node SHARED &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Node();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Node EXCLUSIVE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CANCELLED &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; SIGNAL    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CONDITION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; PROPAGATE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;3;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; waitStatus;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; Node prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; Node next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; Thread thread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node nextWaiter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isShared&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nextWaiter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; SHARED;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Node &lt;span style=&#34;color:#a6e22e&#34;&gt;predecessor&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; NullPointerException {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Node p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NullPointerException();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node() {    &lt;span style=&#34;color:#75715e&#34;&gt;// Used to establish initial head or SHARED marker&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node(Thread thread, Node mode) {     &lt;span style=&#34;color:#75715e&#34;&gt;// Used by addWaiter&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nextWaiter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mode;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; thread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Node(Thread thread, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; waitStatus) { &lt;span style=&#34;color:#75715e&#34;&gt;// Used by Condition&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitStatus&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; waitStatus;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; thread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;注：分独占模式（EXCLUSIVE）与共享模式（SHARED）&lt;/p&gt;</description>
    </item>
    <item>
      <title>BlockingQueue 分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/blockingqueue-%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/blockingqueue-%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>ConcurrentHashMap 分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/concurrenthashmap-%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/concurrenthashmap-%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;hashmap-原理&#34;&gt;HashMap 原理&lt;/h3&gt;&#xA;&lt;h3 id=&#34;concurrenthashmap-原理&#34;&gt;ConcurrentHashMap 原理&lt;/h3&gt;</description>
    </item>
    <item>
      <title>CopyOnWriteArrayList 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/copyonwritearraylist-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/copyonwritearraylist-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CopyOnWriteArrayListTest&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Stream.&lt;span style=&#34;color:#a6e22e&#34;&gt;generate&lt;/span&gt;(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;limit&lt;/span&gt;(100000).&lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#a6e22e&#34;&gt;toList&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CopyOnWriteArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CopyOnWriteArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; startTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentTimeMillis&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list.&lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;(data());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cost: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (System.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentTimeMillis&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; startTime) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ms.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foreach&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CopyOnWriteArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CopyOnWriteArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; startTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentTimeMillis&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (String d: data) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            list.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(d);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cost: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (System.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentTimeMillis&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; startTime) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ms.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CopyOnWriteArrayListTest test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CopyOnWriteArrayListTest();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        test.&lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        test.&lt;span style=&#34;color:#a6e22e&#34;&gt;foreach&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;cost: 2ms.&#xD;&#xA;cost: 3012ms.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是一个读写分离器&lt;/p&gt;</description>
    </item>
    <item>
      <title>CountDownLatch 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/countdownlatch--%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/countdownlatch--%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;一-场景问题引入&#34;&gt;一、 场景（问题引入）&lt;/h3&gt;&#xA;&lt;h3 id=&#34;二-threadjoin-方案&#34;&gt;二、 Thread#join 方案&lt;/h3&gt;&#xA;&lt;h3 id=&#34;三-countdownlatch-方案&#34;&gt;三、 CountDownLatch 方案&lt;/h3&gt;&#xA;&lt;h3 id=&#34;四-countdownlatch-相比-threadjoin-方案的优点&#34;&gt;四、 CountDownLatch 相比 Thread#join 方案的优点&lt;/h3&gt;&#xA;&lt;h3 id=&#34;五-countdownlatch-原理分析&#34;&gt;五、 CountDownLatch 原理分析&lt;/h3&gt;&#xA;&lt;h3 id=&#34;六-countdownlatch-其他典型使用场景&#34;&gt;六、 CountDownLatch 其他典型使用场景&lt;/h3&gt;&#xA;&lt;h3 id=&#34;七-总结&#34;&gt;七、 总结&lt;/h3&gt;</description>
    </item>
    <item>
      <title>CyclicBarrier 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/cyclicbarrier-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>DelayQueue 使用与原理（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/delayqueue-%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/delayqueue-%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    <item>
      <title>Exchanger 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/exchanger-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/exchanger-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>HashedWheelTimer 时间轮（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/hashedwheeltimer-%E6%97%B6%E9%97%B4%E8%BD%AE/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/datastructure/hashedwheeltimer-%E6%97%B6%E9%97%B4%E8%BD%AE/</guid>
      <description></description>
    </item>
    <item>
      <title>Phaser 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/phaser-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/phaser-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>ReentrantLock 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/reentrantlock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>ReentrantReadWriteLock 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/reentrantreadwritelock-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>Semaphore 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0000</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/lock/semaphore-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>Java 安装</title>
      <link>http://localhost:8080/java/java-%E5%9F%BA%E7%A1%80/java-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 06 Feb 2022 16:31:43 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%9F%BA%E7%A1%80/java-%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;h2 id=&#34;linux-安装&#34;&gt;Linux 安装&lt;/h2&gt;&#xA;&lt;h3 id=&#34;环境信息&#34;&gt;环境信息&lt;/h3&gt;&#xA;&lt;h3 id=&#34;一移除已有-java-版本可选&#34;&gt;一、移除已有 Java 版本（可选）&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo yum remove -y java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二下载并安装-java8&#34;&gt;二、下载并安装 Java8&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget --no-cookies --no-check-certificate --header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xzvf jdk-8u131-linux-x64.tar.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -a jdk1.8.0_131/ /usr/local/java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf jdk-8u131-linux-x64.tar.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;三配置-java_home&#34;&gt;三、配置 JAVA_HOME&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;打开bashrc(or /etc/profile???)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim ~/.bashrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在文件末尾追加&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export JAVA_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/jdk1.8.0_131&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export JRE_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$JAVA_HOME/jre&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$JAVA_HOME/bin:$JRE_HOME/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export CLASSPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.:$JAVA_HOME/lib:$JRE_HOME/lib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;配置立即生效&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ~/.bashrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查看java版本，看配置是否已生效&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;windows-安装&#34;&gt;Windows 安装&lt;/h2&gt;</description>
    </item>
    <item>
      <title>CompletionService 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/threadpool/completionservice-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 10 Jan 2022 23:36:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/threadpool/completionservice-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>ForkJoinPool 源码分析（未完）</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/threadpool/forkjoinpool-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 10 Jan 2022 23:36:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/threadpool/forkjoinpool-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>ScheduledThreadPoolExecutor 源码分析</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/threadpool/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 10 Jan 2022 23:36:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/threadpool/scheduledthreadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;1-scheduledthreadpoolexecutor-的使用&#34;&gt;1. ScheduledThreadPoolExecutor 的使用&lt;/h2&gt;&#xA;&lt;h3 id=&#34;一段简单的代码例子&#34;&gt;一段简单的代码例子&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ScheduledExecutorService executor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Executors.&lt;span style=&#34;color:#a6e22e&#34;&gt;newScheduledThreadPool&lt;/span&gt;(10);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    executor.&lt;span style=&#34;color:#a6e22e&#34;&gt;schedule&lt;/span&gt;(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;schedule task is running....&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;schedule task done&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, 10, TimeUnit.&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main thread run here.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    executor.&lt;span style=&#34;color:#a6e22e&#34;&gt;shutdown&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其运行结果如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;main thread run here.&#xD;&#xA;schedule task is running....&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-源码分析&#34;&gt;2. 源码分析&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ScheduledExecutorService executor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Executors.&lt;span style=&#34;color:#a6e22e&#34;&gt;newScheduledThreadPool&lt;/span&gt;(10); &lt;span style=&#34;color:#75715e&#34;&gt;// 实际返回的便是 ScheduledThreadPoolExecutor&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而 ScheduledThreadPoolExecutor 实际是 ThreadPoolExecutor 的子类，在其设计基础上扩展了定时能力，与 ThreadPoolExecutor 不同的是，ScheduledThreadPoolExecutor 内的 workQueue 采用的是 DelayedWorkQueue，一个 BlockingQueue 实现，但支持定时能力，内部实现更类似 DelayQueue。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ScheduledThreadPoolExecutor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; corePoolSize) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(corePoolSize, Integer.&lt;span style=&#34;color:#a6e22e&#34;&gt;MAX_VALUE&lt;/span&gt;, 0, NANOSECONDS, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DelayedWorkQueue());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来我们看核心逻辑，即&lt;code&gt;schedule&lt;/code&gt;方法的逻辑：&lt;/p&gt;</description>
    </item>
    <item>
      <title>ThreadPoolExecutor 源码分析</title>
      <link>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/threadpool/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 10 Jan 2022 23:36:41 +0800</pubDate>
      <guid>http://localhost:8080/java/java-%E5%B9%B6%E5%8F%91/threadpool/threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;线程的创建销毁非常耗费资源，因此都想着能不能不要销毁，而是可以复用，复用？嗯，条件发射的冒出两个方案：一个单例，一个池化。&lt;/p&gt;&#xA;&lt;p&gt;而 JDK8 之后，官方自带提供了一整套非常好用的任务执行器 Executor，今天我们先来看下最基本的 ThreadPoolExecutor 的使用，及其原理机制。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-threadpoolexecutor-的使用&#34;&gt;1. ThreadPoolExecutor 的使用&lt;/h2&gt;&#xA;&lt;h3 id=&#34;一段简单的代码例子&#34;&gt;一段简单的代码例子&lt;/h3&gt;&#xA;&lt;p&gt;我们还是从一个最简单的例子，看下怎么使用，再剖析其内部实现机制。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;thread_pool_execute&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ExecutorService executor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Executors.&lt;span style=&#34;color:#a6e22e&#34;&gt;newFixedThreadPool&lt;/span&gt;(3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 5; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        executor.&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                TimeUnit.&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (InterruptedException ignored) {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;now task is running on &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;now have assigned &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; tasks.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main thread end.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Yipsen: 注意，如果不对 ThreadPoolExecutor 进行 shutdown，会导致主线程阻塞&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 原因是 ThreadPoolExecutor 启动任务后就会构建 Worker，而 Worker 会一直驻留，&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 而且因为 Worker 所属的 ThreadGroup 就是主线程，因此其驻留会挡住主线程的关闭。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    executor.&lt;span style=&#34;color:#a6e22e&#34;&gt;shutdown&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其运行结果：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
